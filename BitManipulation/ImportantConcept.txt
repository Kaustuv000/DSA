# For division by 2 -> we can do right shift by 1

# To check if the number is odd -> we can do is N&1
# if this gives 1 then we can be sure that the number is odd
# as the LSB of odd number will always be one

# Binary search faster version
# in place of (low+high)/2
# we can do (low+high)>>1 -> this means dividing by 2

# In STL there is already a function
# __builtin_popcount(n) -> tells the number of set bits in number 'n'

# we can also count set bits by removing the last set bits, one by one
# we can count by doing N & N-1
 
# To know power of 2
# we do N & N-1 , if we get 0 then , its power of 2

# we can reverse an unsigned binary string by 
# first left shifting the ans variable, which will make space for the bits
# ans = ans | (n & 1) <- this adds the last bit to the answer after extracting it with AND
# rightshifting the actual binary string by 1 as we already extracted the right most bit

