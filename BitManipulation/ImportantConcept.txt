# For division by 2 -> we can do right shift by 1

# To check if the number is odd -> we can do is N&1
# if this gives 1 then we can be sure that the number is odd
# as the LSB of odd number will always be one

# Binary search faster version
# in place of (low+high)/2
# we can do (low+high)>>1 -> this means dividing by 2

# In STL there is already a function
# __builtin_popcount(n) -> tells the number of set bits in number 'n'

# we can also count set bits by removing the last set bits, one by one
# we can count by doing N & N-1
 
# To know power of 2
# we do N & N-1 , if we get 0 then , its power of 2

# we can reverse an unsigned binary string by 
# first left shifting the ans variable, which will make space for the bits
# ans = ans | (n & 1) <- this adds the last bit to the answer after extracting it with AND
# rightshifting the actual binary string by 1 as we already extracted the right most bit


# Distance between two integers

=========V1===================

class Solution {
public:
    int hammingDistance(int x, int y) {
        int ans = x ^ y; //XOR gives us the places where the bit needs to be flipped
        int cnt = 0;
        while (ans > 0){ // then we check the number of set bits
            cnt += ans%2;
            ans = ans/2;
        }
        return cnt;
    }
};

=========V2===================

class Solution {
 public:
  int hammingDistance(const int x, const int y) {
    int ret = 0;

    // this for loop runs till one of the number is 0
    // it XOR 's the LSB and finds if it needs to be flipped
    // like the previous one
    // then adds this directly to the result
    // previously we were checking set bits seperately
    for (int a = x, b = y; a > 0 || b > 0; a >>= 1, b >>= 1) {
      ret += (a & 1) ^ (b & 1);
    }
    return ret;
  }
};


# Given a non-empty array of integers nums, 
# every element appears twice except for one. 
# Find that single one.

All duplicate numbers cancel each other with XOR.
a ^ a = 0, and 0 ^ b = b

====== V1 -> Map =====================

int singleNumber(vector<int>& nums) {
    unordered_map<int, int> freq;
    for (int num : nums) freq[num]++;
    for (auto &pair : freq)
        if (pair.second == 1) return pair.first;
    return -1;
}

====== V2 -> Bit Manipulation ========

int singleNumber(vector<int>& nums) {
    int ans = 0;
    for (int num : nums)
        ans ^= num;
    return ans;
}